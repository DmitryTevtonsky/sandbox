{"version":3,"sources":["components/clustering/utils.js","components/clustering/k-means/index.js","components/clustering/k-means/kmeans.js","components/clustering/dbscan/index.js","components/clustering/dbscan/utils.js","components/clustering/index.js","App.js","index.js"],"names":["generateClusterColors","size","colors","i","push","faker","internet","color","getOption","randomization","option","name","scope","err","k","outlier","generateData","pointsCount","rangeX","rangeY","offset","data","min_x","max_x","min_y","max_y","num","rand_pts","x","Math","random","y","lx","ly","errx","erry","r","seeds","length","rx","ry","sqrt","abs","pow","generateRandomPoints","map","point","Object","values","Xxes","Yxes","forEach","extents","min","apply","max","ranges","dataExtentRanges","KMeansComponent","canvas","useRef","useState","centersCount","setCentersCount","clustersCount","setClustersCount","isShowLengths","setIsShowLengths","isWorking","setIsWorking","kmeansRun","context","clearRect","width","height","clusterColors","kmeans","KMeans","fullLengths","Array","from","on","self","means","assignments","fillStyle","fillRect","meanIndex","mean","globalAlpha","save","beginPath","x1","y1","x2","y2","moveTo","lineTo","strokeStyle","stroke","restore","translate","arc","PI","closePath","fill","draw","console","log","iterations","isShowSubLength","round","textAlign","textBaseline","font","fillText","defLength","reduce","sum","curr","measureText","calculateLength","run","delay","useLayoutEffect","current","getContext","className","ref","id","placeholder","onChange","e","target","value","allowClear","checked","loading","onClick","type","distance","a","b","DbscanComponent","maxX","maxY","epsilon","setEpsilon","minPts","setMinPts","noisesCount","setNoisesCount","dbScanRun","labels","dbscan","uniqLabels","Set","filter","label","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","message","description","TabPane","Option","Clustering","setRandomization","setPointsCount","generatedData","setGeneratedData","useEffect","operations","style","icon","defaultActiveKey","tabBarExtraContent","tab","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97030f07.chunk.js","sourcesContent":["/* eslint-disable camelcase */\nimport faker from 'faker';\n\nexport function random(start, end) {\n  const dif = end - start;\n  return Math.random() * dif + start + 1;\n}\n\nexport function generateSampleData(points) {\n  const data = [];\n  // Generate random data\n  for (let i = 0; i < points; i++) {\n    data.push([random(0, 10), random(0, 10)]);\n  }\n  return data;\n}\n\nexport function generateClusterColors(size) {\n  const colors = [];\n  // Generate point color for each cluster.\n  for (let i = 0; i < size; i++) {\n    colors.push(faker.internet.color());\n  }\n  return colors;\n}\n\nexport const getOption = randomization => {\n  let option;\n  switch (randomization) {\n    case 'linear': {\n      option = {\n        name: 'linear',\n        scope: 2,\n        err: 200\n      };\n      break;\n    }\n    case 'circular': {\n      option = {\n        name: 'circular',\n        k: 25,\n        err: 20,\n        outlier: 30\n      };\n      break;\n    }\n    default: {\n      option = {\n        name: ''\n      };\n      break;\n    }\n  }\n  return option;\n};\n\nexport const generateData = (pointsCount, rangeX, rangeY, offset, option) => {\n  const data = generateRandomPoints(\n    offset,\n    rangeX - offset,\n    offset,\n    rangeY - offset,\n    pointsCount,\n    option\n  ).map(point => Object.values(point));\n\n  const Xxes = [];\n  const Yxes = [];\n  data.forEach(([x, y]) => {\n    Xxes.push(x);\n    Yxes.push(y);\n  });\n\n  const extents = [\n    {\n      min: Math.min.apply(null, Xxes),\n      max: Math.max.apply(null, Xxes)\n    },\n    {\n      min: Math.min.apply(null, Yxes),\n      max: Math.max.apply(null, Yxes)\n    }\n  ];\n\n  const dataExtentRanges = () => {\n    const ranges = [];\n\n    for (let i = 0; i < extents.length; i++) {\n      ranges[i] = extents[i].max - extents[i].min;\n    }\n\n    return ranges;\n  };\n\n  return { data, extents, ranges: dataExtentRanges() };\n};\n\nexport function generateRandomPoints(min_x, max_x, min_y, max_y, num, option) {\n  const rand_pts = [];\n  switch (option.name) {\n    case 'linear': {\n      const { scope, err } = option;\n\n      for (var i = 0; i < num; i++) {\n        if (i > num * 0.9) {\n          rand_pts[i] = {\n            x: Math.random() * (max_x - min_x) + min_x,\n            y: Math.random() * (max_y - min_y) + min_y\n          };\n        } else {\n          const lx = Math.random() * (max_x - min_x) + min_x;\n          const ly = lx * scope;\n          const errx = Math.random() * err - err / 2;\n          const erry = Math.random() * err - err / 2;\n          rand_pts[i] = {\n            x: lx + errx,\n            y: ly + erry\n          };\n        }\n      }\n      break;\n    }\n    case 'circular': {\n      const r = [];\n      const seeds = [];\n      const { k, outlier, err } = option;\n      seeds.length = k;\n      r.length = k;\n      for (var i = 0; i < k; i++) {\n        seeds[i] = {\n          x: Math.random() * (max_x - min_x) + min_x,\n          y: Math.random() * (max_y - min_y) + min_y\n        };\n        r[i] = Math.random() * ((max_x - min_x) / 4);\n      }\n      for (var i = 0; i < num; i++) {\n        if (i > num - outlier) {\n          rand_pts[i] = {\n            x: Math.random() * (max_x - min_x) + min_x,\n            y: Math.random() * (max_y - min_y) + min_y\n          };\n        } else {\n          let rx = Math.random() * (2 * r[i % k]) + seeds[i % k].x - r[i % k];\n          let ry =\n            Math.sqrt(\n              Math.abs(\n                r[i % k] * r[i % k] -\n                  (rx - seeds[i % k].x) * (rx - seeds[i % k].x)\n              )\n            ) *\n              Math.pow(-1, (i % 2) + 1) +\n            seeds[i % k].y;\n\n          const errx = Math.random() * err - err / 2;\n          const erry = Math.random() * err - err / 2;\n          rx += errx;\n          ry += erry;\n\n          if (rx < min_x) rx += min_x;\n          if (rx > max_x) rx -= max_x;\n          if (ry > max_y) ry -= max_y;\n          if (ry < min_y) ry += min_y;\n\n          rand_pts[i] = {\n            x: rx,\n            y: ry\n          };\n        }\n      }\n      break;\n    }\n    default: {\n      for (var i = 0; i < num; i++) {\n        rand_pts[i] = [\n          Math.random() * (max_x - min_x) + min_x,\n          Math.random() * (max_y - min_y) + min_y\n        ];\n      }\n      break;\n    }\n  }\n  return rand_pts;\n}\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable no-console */\r\nimport React, { useLayoutEffect, useRef, useState } from 'react';\r\nimport KMeans from 'k-meansjs';\r\nimport { Button, Input, Checkbox } from 'antd';\r\n\r\nimport './index.css';\r\nimport { draw, calculateLength } from './kmeans';\r\nimport { generateClusterColors } from '../utils';\r\n\r\nconst KMeansComponent = ({ data }) => {\r\n  const canvas = useRef();\r\n  const maxX = 540;\r\n  const maxY = 540;\r\n  const [centersCount, setCentersCount] = useState(5);\r\n  const [clustersCount, setClustersCount] = useState(5);\r\n  const [isShowLengths, setIsShowLengths] = useState(false);\r\n\r\n  const [isWorking, setIsWorking] = useState(false);\r\n\r\n  const kmeansRun = context => {\r\n    setIsWorking(true);\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const clusterColors = generateClusterColors(clustersCount);\r\n\r\n    const kmeans = KMeans({\r\n      data,\r\n      k: centersCount\r\n    });\r\n\r\n    const fullLengths = Array.from({ length: centersCount }, () => []);\r\n\r\n    kmeans.on('iteration', self =>\r\n      draw(\r\n        fullLengths,\r\n        context,\r\n        clusterColors,\r\n        self.data,\r\n        self.means,\r\n        self.assignments,\r\n        self.extents,\r\n        self.ranges\r\n      )\r\n    );\r\n\r\n    kmeans.on('end', self => {\r\n      setIsWorking(false);\r\n      console.log(`Построение заняло кол-во итераций: ${self.iterations}`);\r\n      return calculateLength(\r\n        isShowLengths,\r\n        fullLengths,\r\n        context,\r\n        clusterColors,\r\n        self.data,\r\n        self.means,\r\n        self.assignments,\r\n        self.extents,\r\n        self.ranges\r\n      );\r\n    });\r\n\r\n    kmeans.run({\r\n      delay: 0\r\n    });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const context = canvas.current.getContext('2d');\r\n\r\n    kmeansRun(context);\r\n  }, [data]);\r\n\r\n  const handleOnChangeCentersCount = e => setCentersCount(e.target.value);\r\n\r\n  const handleOnChangeClustersCount = e => setClustersCount(e.target.value);\r\n\r\n  const handleRun = () => {\r\n    kmeansRun(canvas.current.getContext('2d'));\r\n  };\r\n\r\n  const onChengeIsShowLengths = e => setIsShowLengths(e.target.checked);\r\n\r\n  return (\r\n    <div className=\"k-means-box\">\r\n      K-means\r\n      <canvas ref={canvas} id=\"canvas\" width={maxX} height={maxY} />\r\n      <div className=\"controls\">\r\n        <Input\r\n          placeholder=\"Количество центров (3)\"\r\n          onChange={handleOnChangeCentersCount}\r\n          allowClear\r\n        />\r\n        <Input\r\n          placeholder=\"Количество кластеров (3)\"\r\n          onChange={handleOnChangeClustersCount}\r\n          allowClear\r\n        />\r\n        <div className=\"buttons\">\r\n          <Checkbox onChange={onChengeIsShowLengths}>\r\n            Показывать расстояния до цетройдов\r\n          </Checkbox>\r\n          <Button loading={isWorking} onClick={handleRun} type=\"primary\">\r\n            Перезапуск\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KMeansComponent;\r\n","export function calculateLength(\r\n  isShowSubLength,\r\n  fullLengths,\r\n  context,\r\n  clusterColors,\r\n  data,\r\n  means,\r\n  assignments,\r\n  extents,\r\n  ranges\r\n) {\r\n  const { canvas } = context;\r\n\r\n  let point;\r\n  let i;\r\n  for (i = 0; i < assignments.length; i++) {\r\n    const meanIndex = assignments[i];\r\n    point = data[i];\r\n    const mean = means[meanIndex];\r\n\r\n    context.globalAlpha = 1;\r\n    context.save();\r\n\r\n    context.beginPath();\r\n\r\n    const x1 =\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y1 =\r\n      (point[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    const x2 =\r\n      (mean[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y2 =\r\n      (mean[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    // Draw path from the point (moveTo) to the cluster centroid.\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n    const length = Math.round(Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2));\r\n\r\n    if (isShowSubLength) {\r\n      console.log(\r\n        `Длина ${i}-го отрезка для ${assignments[i]} центра =`,\r\n        length\r\n      );\r\n\r\n      context.fillStyle = 'black';\r\n      context.textAlign = 'center';\r\n      context.textBaseline = 'bottom';\r\n\r\n      context.font = 'bold  7pt Arial';\r\n      context.fillText(length, x1, y1 - 5);\r\n    }\r\n\r\n    context.strokeStyle = clusterColors[assignments[i]];\r\n    context.stroke();\r\n\r\n    fullLengths[assignments[i]].push(length);\r\n\r\n    context.restore();\r\n  }\r\n\r\n  for (i = 0; i < means.length; i++) {\r\n    context.save();\r\n\r\n    point = means[i];\r\n\r\n    context.globalAlpha = 1;\r\n    context.fillStyle = 'black';\r\n    const x =\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y =\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2));\r\n\r\n    context.translate(x, y);\r\n\r\n    context.beginPath();\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    const defLength = Math.round(\r\n      fullLengths[i].reduce((sum, curr) => sum + curr) / fullLengths[i].length\r\n    );\r\n    const { width } = context.measureText(defLength);\r\n    context.fillStyle = 'white';\r\n    context.fillRect(10, -20, width + 10, 12);\r\n\r\n    context.fillStyle = 'black';\r\n    context.textAlign = 'left';\r\n    context.font = 'bold 14px Arial';\r\n    context.fillText(defLength, 10, -9);\r\n\r\n    context.restore();\r\n  }\r\n  return fullLengths;\r\n}\r\n\r\nexport function draw(\r\n  fullLengths,\r\n  context,\r\n  clusterColors,\r\n  data,\r\n  means,\r\n  assignments,\r\n  extents,\r\n  ranges\r\n) {\r\n  const { canvas } = context;\r\n\r\n  // Slightly clear the canvas to make new draws visible.\r\n  context.fillStyle = 'rgba(255,255,255, 1)';\r\n  context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  let point;\r\n  let i;\r\n  /* Iterate though points draw line from their origin to their cluster centroid.\r\n   * `assignments` contains cluster centroid index for each point.\r\n   */\r\n  for (i = 0; i < assignments.length; i++) {\r\n    const meanIndex = assignments[i];\r\n\r\n    point = data[i];\r\n    const mean = means[meanIndex];\r\n\r\n    // Make lines that will get drawn alpha transparent.\r\n    context.globalAlpha = 0.7;\r\n\r\n    // Push current state onto the stack.\r\n    context.save();\r\n\r\n    context.beginPath();\r\n\r\n    // Begin path from current point origin.\r\n    const x1 =\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y1 =\r\n      (point[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    const x2 =\r\n      (mean[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y2 =\r\n      (mean[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    // Draw path from the point (moveTo) to the cluster centroid.\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n    // Draw a stroke on the path to make it visible.\r\n\r\n    context.strokeStyle = 'black';\r\n\r\n    context.stroke();\r\n\r\n    context.restore();\r\n  }\r\n\r\n  // Plot every point onto canvas.\r\n  for (i = 0; i < data.length; i++) {\r\n    context.save();\r\n\r\n    point = data[i];\r\n\r\n    // Make style fully opaque.\r\n    context.globalAlpha = 1;\r\n\r\n    // Move canvas origin on the grid to current point position.\r\n    context.translate(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\r\n    );\r\n\r\n    context.beginPath();\r\n\r\n    // Draw point circle.\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n\r\n    // Set the color for current point based on which cluster it belongs to.\r\n    context.strokeStyle = clusterColors[assignments[i]];\r\n\r\n    // Draw a stroke to make circle visible.\r\n    context.stroke();\r\n    context.closePath();\r\n\r\n    context.restore();\r\n  }\r\n\r\n  // console.log('means', means);\r\n\r\n  // Draw cluster centroids (means).\r\n  for (i = 0; i < means.length; i++) {\r\n    context.save();\r\n\r\n    point = means[i];\r\n\r\n    context.globalAlpha = 0.5;\r\n    context.fillStyle = clusterColors[i];\r\n    context.translate(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\r\n    );\r\n    context.beginPath();\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    context.restore();\r\n  }\r\n}\r\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\nimport React, { useLayoutEffect, useRef, useState } from 'react';\nimport dbscan from 'dbscanjs';\n\nimport { Input, Button, Alert } from 'antd';\nimport { generateClusterColors } from '../utils';\nimport { draw } from './utils';\n\nimport './index.css';\n\nconst distance = (a, b) => {\n  const x = (a[0] - b[0]) ** 2;\n  const y = (a[1] - b[1]) ** 2;\n  return Math.sqrt(x + y);\n};\n\nconst DbscanComponent = ({ data, ranges, extents, maxX, maxY }) => {\n  const canvas = useRef();\n  const [epsilon, setEpsilon] = useState(30);\n  const [minPts, setMinPts] = useState(5);\n  const [clustersCount, setClustersCount] = useState(0);\n  const [noisesCount, setNoisesCount] = useState(0);\n\n  const dbScanRun = () => {\n    const context = canvas.current.getContext('2d');\n\n    const labels = dbscan(data, distance, epsilon, minPts);\n\n    const uniqLabels = Array.from(new Set(labels));\n    setNoisesCount(labels.filter(label => label === -1).length);\n    setClustersCount(uniqLabels.length);\n    console.log('uniqLabels', uniqLabels);\n\n    const colors = generateClusterColors(uniqLabels.length);\n\n    draw(context, data, labels, colors, extents, ranges);\n  };\n\n  useLayoutEffect(() => {\n    console.log('Сгенерированные данные', data);\n    dbScanRun();\n  }, [data]);\n\n  const handleOnChangeEpsilon = e => setEpsilon(e.target.value);\n\n  const handleOnChangeMinPts = e => setMinPts(e.target.value);\n\n  const handleRun = () => {\n    dbScanRun();\n  };\n\n  return (\n    <div className=\"dbscan-box\">\n      DBSCAN\n      <canvas ref={canvas} id=\"canvas\" width={maxX} height={maxY} />\n      <div className=\"controls\">\n        <Input\n          placeholder=\"minPts  (5)\"\n          onChange={handleOnChangeMinPts}\n          allowClear\n        />\n        <Input\n          placeholder=\"epsilon   (30)\"\n          onChange={handleOnChangeEpsilon}\n          allowClear\n        />\n        {clustersCount && (\n          <Alert\n            message={`Полученное количество кластеров: ${clustersCount - 1}`}\n            description={`Количество некластерированных точек (шумов): ${noisesCount}`}\n            type=\"info\"\n          />\n        )}\n        <div className=\"buttons\">\n          <Button onClick={handleRun} type=\"primary\">\n            Перезапуск\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DbscanComponent;\n","export function draw(context, data, labels, colors, extents, ranges) {\n  const { canvas } = context;\n\n  // Slightly clear the canvas to make new draws visible.\n  context.fillStyle = 'rgba(255,255,255, 1)';\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  let point;\n  let i;\n\n  // Plot every point onto canvas.\n  for (i = 0; i < data.length; i++) {\n    context.save();\n\n    point = data[i];\n\n    // Make style fully opaque.\n    context.globalAlpha = 1;\n\n    // Move canvas origin on the grid to current point position.\n    context.translate(\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\n    );\n\n    // context.translate(point[0], point[1]);\n\n    // context.translate(10, 10);\n\n    context.beginPath();\n\n    // Draw point circle.\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\n\n    const flag = labels[i];\n    if (flag === -1) {\n      context.strokeStyle = colors[labels[i]];\n      context.stroke();\n    } else {\n      context.fillStyle = colors[labels[i]];\n      context.shadowColor = colors[labels[i]];\n      context.shadowBlur = 20;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.fill();\n    }\n\n    // Set the color for current point based on which cluster it belongs to.\n\n    // context.strokeStyle = 'black';\n\n    // Draw a stroke to make circle visible.\n\n    context.closePath();\n\n    context.restore();\n  }\n}\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { Tabs, Select, InputNumber, Button } from 'antd';\nimport KMeansComponent from './k-means';\n\nimport './index.css';\nimport DbscanComponent from './dbscan';\nimport { generateData, getOption } from './utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nconst Clustering = () => {\n  const [randomization, setRandomization] = useState('circular');\n  const [pointsCount, setPointsCount] = useState(1000);\n\n  const maxX = 540;\n  const maxY = 540;\n  const offset = 20;\n\n  const [generatedData, setGeneratedData] = useState(\n    generateData(pointsCount, maxX, maxY, offset, getOption(randomization))\n  );\n\n  useEffect(() => {\n    console.log('wtf');\n    setGeneratedData(\n      generateData(pointsCount, maxX, maxY, offset, getOption(randomization))\n    );\n  }, [randomization]);\n\n  const onChangeRandomization = value => setRandomization(value);\n\n  const handleOnChangePointsCount = value => setPointsCount(value);\n\n  const recalcPoints = () =>\n    setGeneratedData(\n      generateData(pointsCount, maxX, maxY, offset, getOption(randomization))\n    );\n\n  const operations = (\n    <div className=\"operations\">\n      <InputNumber\n        placeholder=\"Количество точек (1000)\"\n        onChange={handleOnChangePointsCount}\n        allowClear\n        style={{ width: 220 }}\n        min={10}\n        max={10000}\n      />\n      <Button icon=\"reload\" onClick={recalcPoints} />\n      <Select\n        style={{ width: 150 }}\n        placeholder=\"Выберите распределение\"\n        onChange={onChangeRandomization}\n        value={randomization}\n      >\n        <Option value=\"linear\">Линейное</Option>\n        <Option value=\"circular\">Круговое</Option>\n        <Option value=\"\">Равномерное</Option>\n      </Select>\n    </div>\n  );\n\n  return (\n    <div className=\"clustering-box\">\n      <Tabs defaultActiveKey=\"2\" tabBarExtraContent={operations}>\n        <TabPane tab=\"K-MEANS\" key=\"1\">\n          <KMeansComponent\n            data={generatedData.data}\n            maxX={maxX}\n            maxY={maxY}\n            offset={offset}\n          />\n        </TabPane>\n        <TabPane tab=\"DBSCAN\" key=\"2\">\n          <DbscanComponent\n            data={generatedData.data}\n            ranges={generatedData.ranges}\n            extents={generatedData.extents}\n            maxX={maxX}\n            maxY={maxY}\n            offset={offset}\n          />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Clustering;\n","import React from 'react';\r\n// import RabbitAuth from './components/rabbit-auth';\r\n// import TestBox from './components/test-box';\r\nimport Clustering from './components/clustering';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <RabbitAuth /> */}\r\n      {/* <TestBox /> */}\r\n      {<Clustering />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}