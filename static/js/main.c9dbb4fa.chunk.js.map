{"version":3,"sources":["components/k-means/kmeans.js","components/k-means/index.js","App.js","index.js"],"names":["random","start","end","dif","Math","KMeansComponent","canvas","useRef","useState","pointsCount","setPointsCount","centersCount","setCentersCount","clustersCount","setClustersCount","isWorking","setIsWorking","clusterColors","size","colors","i","push","faker","internet","color","generateClusterColors","console","log","data","points","generateSampleData","kmeansRun","context","clearRect","width","height","kmeans","KMeans","k","on","self","means","assignments","extents","ranges","point","fillStyle","fillRect","length","meanIndex","mean","globalAlpha","save","beginPath","moveTo","min","lineTo","strokeStyle","stroke","restore","translate","arc","PI","closePath","fill","draw","iterations","message","success","run","delay","useLayoutEffect","current","getContext","className","ref","id","placeholder","onChange","e","target","value","allowClear","disabled","onClick","type","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9dbb4fa.chunk.js","sourcesContent":["import faker from 'faker';\r\n\r\nexport function random(start, end) {\r\n  const dif = end - start;\r\n  return Math.random() * dif + start + 1;\r\n}\r\n\r\nexport function generateSampleData(points) {\r\n  const data = [];\r\n  // Generate random data\r\n  for (let i = 0; i < points; i++) {\r\n    data.push([random(0, 10), random(0, 10)]);\r\n  }\r\n  return data;\r\n}\r\n\r\nexport function generateClusterColors(size) {\r\n  const colors = [];\r\n  // Generate point color for each cluster.\r\n  for (let i = 0; i < size; i++) {\r\n    colors.push(faker.internet.color());\r\n  }\r\n  return colors;\r\n}\r\n\r\nexport function draw(\r\n  context,\r\n  clusterColors,\r\n  data,\r\n  means,\r\n  assignments,\r\n  extents,\r\n  ranges\r\n) {\r\n  const { canvas } = context;\r\n\r\n  // Slightly clear the canvas to make new draws visible.\r\n  context.fillStyle = 'rgba(255,255,255, 1)';\r\n  context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  let point;\r\n  let i;\r\n\r\n  /* Iterate though points draw line from their origin to their cluster centroid.\r\n   * `assignments` contains cluster centroid index for each point.\r\n   */\r\n  for (i = 0; i < assignments.length; i++) {\r\n    const meanIndex = assignments[i];\r\n    point = data[i];\r\n    const mean = means[meanIndex];\r\n\r\n    // Make lines that will get drawn alpha transparent.\r\n    context.globalAlpha = 0.1;\r\n\r\n    // Push current state onto the stack.\r\n    context.save();\r\n\r\n    context.beginPath();\r\n\r\n    // Begin path from current point origin.\r\n    context.moveTo(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2))\r\n    );\r\n\r\n    // Draw path from the point (moveTo) to the cluster centroid.\r\n    context.lineTo(\r\n      (mean[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (mean[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2))\r\n    );\r\n\r\n    // Draw a stroke on the path to make it visible.\r\n    context.strokeStyle = 'black';\r\n    context.stroke();\r\n    // context.closePath();\r\n\r\n    // Restore saved state.\r\n    context.restore();\r\n  }\r\n\r\n  // Plot every point onto canvas.\r\n  for (i = 0; i < data.length; i++) {\r\n    context.save();\r\n\r\n    point = data[i];\r\n\r\n    // Make style fully opaque.\r\n    context.globalAlpha = 1;\r\n\r\n    // Move canvas origin on the grid to current point position.\r\n    context.translate(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\r\n    );\r\n\r\n    context.beginPath();\r\n\r\n    // Draw point circle.\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n\r\n    // Set the color for current point based on which cluster it belongs to.\r\n    context.strokeStyle = clusterColors[assignments[i]];\r\n\r\n    // Draw a stroke to make circle visible.\r\n    context.stroke();\r\n    context.closePath();\r\n\r\n    context.restore();\r\n  }\r\n\r\n  // Draw cluster centroids (means).\r\n  for (i = 0; i < means.length; i++) {\r\n    context.save();\r\n\r\n    point = means[i];\r\n\r\n    context.globalAlpha = 0.5;\r\n    context.fillStyle = clusterColors[i];\r\n    context.translate(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\r\n    );\r\n    context.beginPath();\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    context.restore();\r\n  }\r\n}\r\n","/* eslint-disable no-console */\r\nimport React, { useLayoutEffect, useRef, useState } from 'react';\r\nimport KMeans from 'k-meansjs';\r\nimport { Button, Input, message } from 'antd';\r\n\r\nimport './index.css';\r\nimport { draw, generateClusterColors, generateSampleData } from './kmeans';\r\n\r\nconst KMeansComponent = () => {\r\n  const canvas = useRef();\r\n  const [pointsCount, setPointsCount] = useState(100);\r\n  const [centersCount, setCentersCount] = useState(3);\r\n  const [clustersCount, setClustersCount] = useState(3);\r\n\r\n  const [isWorking, setIsWorking] = useState(false);\r\n\r\n  const clusterColors = generateClusterColors(clustersCount);\r\n  console.log('clusterColors', clusterColors);\r\n  const data = generateSampleData(pointsCount);\r\n\r\n  const kmeansRun = context => {\r\n    setIsWorking(true);\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    // context.fillStyle = 'rgb(220,220,220)';\r\n    // context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const kmeans = KMeans({\r\n      data,\r\n      k: centersCount\r\n    });\r\n\r\n    kmeans.on('iteration', self => {\r\n      draw(\r\n        context,\r\n        clusterColors,\r\n        self.data,\r\n        self.means,\r\n        self.assignments,\r\n        self.extents,\r\n        self.ranges\r\n      );\r\n    });\r\n\r\n    kmeans.on('end', self => {\r\n      setIsWorking(false);\r\n      console.log(`Iterations took for completion: ${self.iterations}`);\r\n      message.success(\r\n        `Построение заняло следующее количество итераций: ${self.iterations}`\r\n      );\r\n    });\r\n\r\n    kmeans.run({\r\n      delay: 50\r\n    });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const context = canvas.current.getContext('2d');\r\n\r\n    kmeansRun(context);\r\n  }, []);\r\n\r\n  const handleOnChangePointsCount = e => setPointsCount(e.target.value);\r\n\r\n  const handleOnChangeCentersCount = e => setCentersCount(e.target.value);\r\n\r\n  const handleOnChangeClustersCount = e => setClustersCount(e.target.value);\r\n\r\n  const handleRun = () => {\r\n    const context = canvas.current.getContext('2d');\r\n    kmeansRun(context);\r\n  };\r\n\r\n  return (\r\n    <div className=\"k-means-box\">\r\n      k-means implementation\r\n      <canvas ref={canvas} id=\"canvas\" width=\"600\" height=\"600\" />\r\n      <div className=\"controls\">\r\n        <Input\r\n          placeholder=\"Количество точек (100)\"\r\n          onChange={handleOnChangePointsCount}\r\n          allowClear\r\n        />\r\n        <Input\r\n          placeholder=\"Количество центров (3)\"\r\n          onChange={handleOnChangeCentersCount}\r\n          allowClear\r\n        />\r\n\r\n        <Input\r\n          placeholder=\"Количество кластеров (3)\"\r\n          onChange={handleOnChangeClustersCount}\r\n          allowClear\r\n        />\r\n\r\n        <Button disabled={isWorking} onClick={handleRun} type=\"default\">\r\n          Перезапуск\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KMeansComponent;\r\n","import React from 'react';\r\n// import RabbitAuth from './components/rabbit-auth';\r\n// import TestBox from './components/test-box';\r\nimport KMeansComponent from './components/k-means';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <RabbitAuth /> */}\r\n      {/* <TestBox /> */}\r\n      {<KMeansComponent />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}