{"version":3,"sources":["components/clustering/kmeans.js","components/clustering/index.js","App.js","index.js"],"names":["random","start","end","dif","Math","KMeansComponent","canvas","useRef","useState","pointsCount","setPointsCount","centersCount","setCentersCount","clustersCount","setClustersCount","isWorking","setIsWorking","kmeansRun","context","clearRect","width","height","clusterColors","size","colors","i","push","faker","internet","color","generateClusterColors","data","points","generateSampleData","console","log","kmeans","KMeans","k","fullLengths","Array","from","length","on","self","means","assignments","extents","ranges","point","fillStyle","fillRect","meanIndex","mean","globalAlpha","save","beginPath","x1","min","y1","x2","y2","moveTo","lineTo","strokeStyle","stroke","restore","translate","arc","PI","closePath","fill","draw","iterations","message","success","round","sqrt","textAlign","textBaseline","font","fillText","x","y","defLength","reduce","sum","curr","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","calculateLength","run","delay","useLayoutEffect","current","getContext","className","ref","id","placeholder","onChange","e","target","value","allowClear","loading","onClick","type","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cf03052.chunk.js","sourcesContent":["import faker from 'faker';\r\n\r\nexport function random(start, end) {\r\n  const dif = end - start;\r\n  return Math.random() * dif + start + 1;\r\n}\r\n\r\nexport function generateSampleData(points) {\r\n  const data = [];\r\n  // Generate random data\r\n  for (let i = 0; i < points; i++) {\r\n    data.push([random(0, 10), random(0, 10)]);\r\n  }\r\n  return data;\r\n}\r\n\r\nexport function generateClusterColors(size) {\r\n  const colors = [];\r\n  // Generate point color for each cluster.\r\n  for (let i = 0; i < size; i++) {\r\n    colors.push(faker.internet.color());\r\n  }\r\n  return colors;\r\n}\r\n\r\nexport function calculateLength(\r\n  fullLengths,\r\n  context,\r\n  clusterColors,\r\n  data,\r\n  means,\r\n  assignments,\r\n  extents,\r\n  ranges\r\n) {\r\n  const { canvas } = context;\r\n\r\n  let point;\r\n  let i;\r\n  for (i = 0; i < assignments.length; i++) {\r\n    const meanIndex = assignments[i];\r\n\r\n    point = data[i];\r\n    const mean = means[meanIndex];\r\n\r\n    // Make lines that will get drawn alpha transparent.\r\n    context.globalAlpha = 1;\r\n\r\n    // Push current state onto the stack.\r\n    context.save();\r\n\r\n    context.beginPath();\r\n\r\n    // Begin path from current point origin.\r\n    const x1 =\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y1 =\r\n      (point[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    const x2 =\r\n      (mean[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y2 =\r\n      (mean[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    // Draw path from the point (moveTo) to the cluster centroid.\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n    const length = Math.round(Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2));\r\n    console.log(`Длина ${i}-го отрезка для ${assignments[i]} центра =`, length);\r\n\r\n    context.fillStyle = 'black';\r\n    context.textAlign = 'center';\r\n    context.textBaseline = 'bottom';\r\n\r\n    context.font = 'bold  7pt Arial';\r\n    context.fillText(length, x1, y1 - 5);\r\n\r\n    // Draw a stroke on the path to make it visible.\r\n    context.strokeStyle = clusterColors[assignments[i]];\r\n    context.stroke();\r\n\r\n    fullLengths[assignments[i]].push(length);\r\n\r\n    context.restore();\r\n  }\r\n\r\n  for (i = 0; i < means.length; i++) {\r\n    context.save();\r\n\r\n    point = means[i];\r\n\r\n    context.globalAlpha = 1;\r\n    context.fillStyle = 'black';\r\n    const x =\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y =\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2));\r\n\r\n    context.translate(x, y);\r\n\r\n    context.beginPath();\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    const defLength = Math.round(\r\n      fullLengths[i].reduce((sum, curr) => sum + curr) / fullLengths[i].length\r\n    );\r\n\r\n    context.shadowColor = clusterColors[i];\r\n    context.shadowOffsetX = 0;\r\n    context.shadowOffsetY = 0;\r\n    context.shadowBlur = 3;\r\n\r\n    context.fillStyle = 'black';\r\n    context.font = 'bold 10pt Arial';\r\n    context.fillText(defLength, 10, -10);\r\n\r\n    context.restore();\r\n  }\r\n  return fullLengths;\r\n}\r\n\r\nexport function draw(\r\n  fullLengths,\r\n  context,\r\n  clusterColors,\r\n  data,\r\n  means,\r\n  assignments,\r\n  extents,\r\n  ranges\r\n) {\r\n  const { canvas } = context;\r\n\r\n  // Slightly clear the canvas to make new draws visible.\r\n  context.fillStyle = 'rgba(255,255,255, 1)';\r\n  context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  let point;\r\n  let i;\r\n  /* Iterate though points draw line from their origin to their cluster centroid.\r\n   * `assignments` contains cluster centroid index for each point.\r\n   */\r\n  for (i = 0; i < assignments.length; i++) {\r\n    const meanIndex = assignments[i];\r\n\r\n    point = data[i];\r\n    const mean = means[meanIndex];\r\n\r\n    // Make lines that will get drawn alpha transparent.\r\n    context.globalAlpha = 0.7;\r\n\r\n    // Push current state onto the stack.\r\n    context.save();\r\n\r\n    context.beginPath();\r\n\r\n    // Begin path from current point origin.\r\n    const x1 =\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y1 =\r\n      (point[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    const x2 =\r\n      (mean[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2));\r\n    const y2 =\r\n      (mean[1] - extents[1].min + 1) * (canvas.height / (ranges[1] + 2));\r\n\r\n    // Draw path from the point (moveTo) to the cluster centroid.\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n\r\n    // Draw a stroke on the path to make it visible.\r\n\r\n    context.strokeStyle = 'black';\r\n\r\n    context.stroke();\r\n\r\n    context.restore();\r\n  }\r\n\r\n  // Plot every point onto canvas.\r\n  for (i = 0; i < data.length; i++) {\r\n    context.save();\r\n\r\n    point = data[i];\r\n\r\n    // Make style fully opaque.\r\n    context.globalAlpha = 1;\r\n\r\n    // Move canvas origin on the grid to current point position.\r\n    context.translate(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\r\n    );\r\n\r\n    context.beginPath();\r\n\r\n    // Draw point circle.\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n\r\n    // Set the color for current point based on which cluster it belongs to.\r\n    context.strokeStyle = clusterColors[assignments[i]];\r\n\r\n    // Draw a stroke to make circle visible.\r\n    context.stroke();\r\n    context.closePath();\r\n\r\n    context.restore();\r\n  }\r\n\r\n  // console.log('means', means);\r\n\r\n  // Draw cluster centroids (means).\r\n  for (i = 0; i < means.length; i++) {\r\n    context.save();\r\n\r\n    point = means[i];\r\n\r\n    context.globalAlpha = 0.5;\r\n    context.fillStyle = clusterColors[i];\r\n    context.translate(\r\n      (point[0] - extents[0].min + 1) * (canvas.width / (ranges[0] + 2)),\r\n      (point[1] - extents[1].min + 1) * (canvas.width / (ranges[1] + 2))\r\n    );\r\n    context.beginPath();\r\n    context.arc(0, 0, 5, 0, Math.PI * 2, true);\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    context.restore();\r\n  }\r\n}\r\n","/* eslint-disable no-console */\r\nimport React, { useLayoutEffect, useRef, useState } from 'react';\r\nimport KMeans from 'k-meansjs';\r\nimport { Button, Input, message } from 'antd';\r\n\r\nimport './index.css';\r\nimport {\r\n  draw,\r\n  generateClusterColors,\r\n  generateSampleData,\r\n  calculateLength\r\n} from './kmeans';\r\n\r\nconst KMeansComponent = () => {\r\n  const canvas = useRef();\r\n  const [pointsCount, setPointsCount] = useState(10);\r\n  const [centersCount, setCentersCount] = useState(3);\r\n  const [clustersCount, setClustersCount] = useState(3);\r\n\r\n  const [isWorking, setIsWorking] = useState(false);\r\n\r\n  const kmeansRun = context => {\r\n    setIsWorking(true);\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const clusterColors = generateClusterColors(clustersCount);\r\n    const data = generateSampleData(pointsCount);\r\n    console.log('Входные данные:', data);\r\n\r\n    const kmeans = KMeans({\r\n      data,\r\n      k: centersCount\r\n    });\r\n\r\n    const fullLengths = Array.from({ length: centersCount }, () => []);\r\n\r\n    kmeans.on('iteration', self =>\r\n      draw(\r\n        fullLengths,\r\n        context,\r\n        clusterColors,\r\n        self.data,\r\n        self.means,\r\n        self.assignments,\r\n        self.extents,\r\n        self.ranges\r\n      )\r\n    );\r\n\r\n    kmeans.on('end', self => {\r\n      setIsWorking(false);\r\n      console.log(`Построение заняло кол-во итераций: ${self.iterations}`);\r\n      message.success(\r\n        `Построение заняло следующее количество итераций: ${self.iterations}`\r\n      );\r\n      return calculateLength(\r\n        fullLengths,\r\n        context,\r\n        clusterColors,\r\n        self.data,\r\n        self.means,\r\n        self.assignments,\r\n        self.extents,\r\n        self.ranges\r\n      );\r\n    });\r\n\r\n    kmeans.run({\r\n      delay: 50\r\n    });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const context = canvas.current.getContext('2d');\r\n\r\n    kmeansRun(context);\r\n  }, []);\r\n\r\n  const handleOnChangePointsCount = e => setPointsCount(e.target.value);\r\n\r\n  const handleOnChangeCentersCount = e => setCentersCount(e.target.value);\r\n\r\n  const handleOnChangeClustersCount = e => setClustersCount(e.target.value);\r\n\r\n  const handleRun = () => {\r\n    kmeansRun(canvas.current.getContext('2d'));\r\n  };\r\n\r\n  return (\r\n    <div className=\"k-means-box\">\r\n      k-means implementation\r\n      <canvas ref={canvas} id=\"canvas\" width=\"600\" height=\"600\" />\r\n      <div className=\"controls\">\r\n        <Input\r\n          placeholder=\"Количество точек (10)\"\r\n          onChange={handleOnChangePointsCount}\r\n          allowClear\r\n        />\r\n        <Input\r\n          placeholder=\"Количество центров (3)\"\r\n          onChange={handleOnChangeCentersCount}\r\n          allowClear\r\n        />\r\n        <Input\r\n          placeholder=\"Количество кластеров (3)\"\r\n          onChange={handleOnChangeClustersCount}\r\n          allowClear\r\n        />\r\n        <Button loading={isWorking} onClick={handleRun} type=\"primary\">\r\n          Перезапуск\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KMeansComponent;\r\n","import React from 'react';\r\n// import RabbitAuth from './components/rabbit-auth';\r\n// import TestBox from './components/test-box';\r\nimport KMeansComponent from './components/clustering';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <RabbitAuth /> */}\r\n      {/* <TestBox /> */}\r\n      {<KMeansComponent />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}